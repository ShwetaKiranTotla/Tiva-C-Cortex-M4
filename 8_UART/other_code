// The #define statement SYSDIV2 initializes
// the PLL to the desired frequency.
#define SYSDIV2 4
// bus frequency is 400MHz/(SYSDIV2+1) = 400MHz/(4+1) = 80 MHz

// configure the system to get its clock from the PLL
void PLL_Init(void);
SysTickHandler(void){}
GPIOFHandler(void){}
/* Program to output a 25Khz PWM signal on Motion Control Module 0
M0PWM0 ->; PB6
M0PWM1 ->; PB7
PLL Enabled at 400Mhz, System clock at 80MHz
*/
#include <stdint.h>
#include <stdbool.h>
#include "tm4c123gh6pm.h"

//100ms delay
void delayms(unsigned long millisecs){
  unsigned long count;
  while(millisecs > 0 ) {
    count = 1333333; // Value tuned experimentally 100ms
    while (count > 0) {
      count--;
    }
    millisecs--;
  }
}

// Initialize PWM on pins PB6 & PB7
void PWM_Init()
{
    volatile unsigned long delay;

    SYSCTL_RCC_R |= 0x00100000;       // USEPWMDIV set to 1
    SYSCTL_RCC_R &= ~0x000E0000;  // PWMDIV set to 2

        SYSCTL_RCGC0_R |= 0x00100000;     // Enable Clock for PWM Module
    SYSCTL_RCGC2_R |= 0x00000002;     // Port B clock gating control
        delay = SYSCTL_RCGC2_R;           // delay
        GPIO_PORTB_CR_R |= 0xC0;          // allow changes to PB6-7
        GPIO_PORTB_AMSEL_R &= 0x00;   // disable analog function
    GPIO_PORTB_DEN_R |= 0xC0;         // Enable Digital Pins
    GPIO_PORTB_DIR_R |= 0xC0;     // Direction Output
    GPIO_PORTB_AFSEL_R |= 0xC0;       // PWM alternate function on PB6-7
        GPIO_PORTB_PCTL_R = (GPIO_PORTB_PCTL_R&0x00FFFFFF)+0x44000000;
    // Set PCTL Register PMC7 and PMC6 to 0x04


        PWM0_0_CTL_R = 0x00000000;
        // PWM Register control UPDATE Immediate Local Sync
        // Counter counts Down PWM Disable
    PWM0_0_GENA_R |= 0x0000008C;      // Settings for pwmA
    PWM0_0_GENB_R |= 0x0000080C;      // Settings for pwmB
    PWM0_0_LOAD_R = 0x00001F3F;   // Counter Value loaded for 25 Khz PWM
    // PWM clock = 40 Mhz (25 nS), so for a 25Khz signal
    // i.e. 40 uS LOAD = 40000/25 = 1600 - 1 (0x063F)
    PWM0_0_CMPA_R = 0x00001EFF;       // 50% Duty Cycle
    PWM0_0_CMPB_R = 0x00001EFF;       // 50% Duty Cycle
    PWM0_0_CTL_R |= 0x00000001;   // PWM Gen0 Timers Start
    PWM0_ENABLE_R |= 0x00000003;      // PWM Output Enable

}

int main()
{

PWM_Init();

while(1)
{

        delayms(10);
        PWM0_0_CMPA_R = 0x031F;  //Change Duty Cycle
        delayms(10);
        PWM0_0_CMPA_R = 0x063F;  //Change Duty Cycle
        delayms(10);
        PWM0_0_CMPA_R = 0x000F;  //Change Duty Cycle
        delayms(10);
        PWM0_0_CMPA_R = 0x063F;  //Change Duty Cycle
}
}